%%% \title{Model of the Colorado Risk Limiting Audit (CORLA) tool}
%%% \author{Joseph R. Kiniry and Daniel M. Zimmerman}
%%% \date{July 2017}
%%%
%%% \maketitle
%%%
%%% \section{Introduction}
%%% This document contains a formal specification of the ColoradoRLA
%%% system/tool. It is written in a literate style using the PVS
%%% theorem prover. Writing system specifications in this fashion is
%%% called (formal) domain engineering. Our formal domain model is
%%% written in PVS's higher-order logic (HOL). Our informal domain
%%% model is written in the Free \& Fair System Specification Language,
%%% or FAFESSL for short. FAFESSL is a daughter of Extended BON which
%%% was, in turn, a daughter of BON, the Business Object Notation.
%%%
%%% See our Bibliography project at GitHub, 
%%% \url{https://github.com/FreeAndFair/Bibliography}, for more
%%% information.
%%%
%%% In order to relate PVS to FAFESSL, we must define a refinement
%%% relationship between their two type systems. Informally, that
%%% mapping is described in the following paragraph.
%%%
%%% We map PVS public theories and their contents to FAFESSL constructs.
%%% The top-level corla theory maps to the FAFESSL system specification,
%%% theories map to clusters, (PVS) types map to (FAFESSL) types, and
%%% functions map to features.  We use special comments to denote
%%% informal specifications which will be extracted using a shell script
%%% into a well-typed FAFESSL informal domain model specification. 
%%%
%%% As mentioned above, we write formal specifications using a
%%% literate style, a la Knuth. Doing so permits us to document our
%%% thinking and the system design, from domain modeling and
%%% engineering all of the way to formal specification and
%%% verification, in a fashion that produces beautifully printed
%%% books and interactive hypertext.
%%%
%%% In order to write literate PVS we use our old friend Adriaan de
%%% Groot's scripts, available at
%%% \url{http://www.cs.kun.nl/~adridg/research/PVS-literate.html}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%% Here is a cheat sheet for literate PVS.

%%%%%% Six percent signs (yes, %%%%%%) are meta-comments and are
%%%%%% deleted from the output in all processing modes. We typically
%%%%%% use these comments for the copyright header at the top of the
%%%%%% file and to delineate blocks of PVS code.

%%%%%% Three percent signs (%%%) are output as regular text in the
%%%%%% file mode. The text after the percent signs can contain
%%%%%% arbitrary LaTeX commands, and is output as-is. In block mode,
%%%%%% three percent sign comments are deleted from the output.

%%%%%% One percent sign (%) is output as regular text in block mode
%%%%%% and deleted in file mode.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Our formal domain model is also annotated with structured comments
%%% in precise natural language using a standard set of annotations.
%%% A shell script processes these annotations and generates a
%%% well-typed informal FAFESSL specification.
%%%
%%% The FAFESSL annotations we use are as follows:
%%% \begin{description}
%%% \item[\@system] the FAFESSL name of the system
%%% \item[\@cluster] the FAFESSL name of a cluster
%%% \item[\@explanation] the explanation for an artifact
%%% \item[\@description] a short description of an artifact
%%% \item[\@indexing-CLAUSE] a prefix for any indexing $<$CLAUSE$>$
%%% \end{description}
%%%
%%% These suffixes are commonly used:
%%% \begin{description}
%%% \item[author] an author of an artifact
%%% \item[organization] an organization responsible for an artifact
%%% \item[keywords] a comma-separated list of keywords
%%% \item[created] the creation date for an artifact
%%% \item[github] the URL for the GitHub project containing an artifact
%%% \end{description}
%%%
%%% \section{System Overview}
%%%
%%% The RLA Tool is being developed by Free \& Fair for the Colorado
%%% Department of State (CDOS henceforth). The RLA Tool facilitates
%%% running a risk limiting audit across several jurisdictions. In the
%%% case of Colorado, it facilitates running risk limiting audits
%%% across all counties in the state simultaneously.
%%%
%%% The Colorado election law pertaining to election audits is "TBD",
%%% and the rules pertaining to such are found in the "Revised Draft
%%% of Proposed Rules" whose latest version is labeled CCR 1505-1 and
%%% dated July 6, 2017. Section 25, Post-Election Audit, of that
%%% document is the salient portion of that document. We will call
%%% this document RDPR-6-Jul-2017 for the purpose of traceability in
%%% this specification.
%%%
%%% This domain model is based upon that law, its rules, our contract,
%%% our bibliography of publications about risk-limiting audits, etc.

%%%%%% Literate PVS comments +BEGIN and +END denote blocks. A block
%%%%%% named "foo" is written to a LaTeX file "foo.tex".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Traceability and process features and annotations.

fafessl: THEORY
BEGIN
  TBD: bool = TRUE
END fafessl

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN background

%%% \section{Background Model Elements}

%%% It is necessary to summarize a number of background concepts from
%%% computer science in order to formalize the RLA Tool.
%%
%%% The RLA Tool is a client-server system. The server is implemented
%%% in Java and runs on servers hosted by CDOS. The client is
%%% implemented in TypeScript and JavaScript and runs in modern web
%%% browsers.
%%%
%%% As we are hosting the RLA Tool in CDOS's system, they are
%%% providing the hosting servers, network, and a number of services
%%% in support of the tools deployment and management.
%%%
%%% A database is used to store all of the data relevant to
%%% audits. Databases contain tables that describe the information
%%% they contain. We need not formalize database elements in any more
%%% detail than what follows.

database: THEORY
BEGIN
  database_table: TYPE
  data: TYPE
  database: TYPE = setof[database_table]
% @description Write this data to that table in that database!
  write: [database, database_table, data -> database]
% @description What is the data in that table of that database?
  read: [database, database_table -> data]
END database

%%% We also need to be able to talk about some pretty simple ideas
%%% from information systems.  For example, many files in election
%%% systems are syntactically just lists of comma-separated
%%% values. Email is used for communication between officials and
%%% with the ?. Files are used to store information in a
%%% persistent fashion. Consequently, we introduce a few types for
%%% these ideas.
% @review How are emails (for SoS admin, for County Audit Admins, 
% presumably, and for whom else?) put into the system? Is this a 
% standard part of the authentication process?

information_systems: THEORY
BEGIN
% @description A list of values of arbitrary types and syntax,
% separated by commas.
  comma_separated_value: TYPE
% The csv type is an example of how to introduce a type synonym
% in PVS.
  csv: TYPE = comma_separated_value
  email: TYPE
  email_address: TYPE
  file: TYPE
  network: TYPE
  web_browser: TYPE
  browser: TYPE = web_browser
  javascript_code: TYPE
END information_systems

%%% Several kinds of servers are necessary to deploy this system.  At
%%% the minimum, two of each of a web server, a time (NTP) server, a
%%% firewall, and a database server are necessary. Two servers of each
%%% class are required for redundancy to fulfill availability
%%% requirements. Preferably rendundant servers would be hosted in
%%% separate facilities, with separate and independent power systems
%%% and networks.
%%%
%%% An Election Night Reporting (ENR) server is mentioned repeatedly
%%% in the RDPR-6-Jul-2017, so we model it here.

% @relation web_server inherit server
% @relation time_server inherit server
% @relation firewall inherit server
% @relation database_server inherit server
% @relation enr_server inherit server
server: DATATYPE WITH SUBTYPES
  web_server, time_server, firewall, database_server, enr_server
BEGIN
  IMPORTING information_systems, database, elections
  
  web_server?: make_web_server: web_server
  time_server?: make_time_server: time_server
  firewall?: make_filewall: firewall
  database_server?(databases: set[database]):
    make_database_server: database_server
  enr_server?: make_enr_server: enr_server
END server

%%% Over time, as we need to introduce more background concepts, we
%%% will add them to this theory.

%+END background

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN elections

%%% \section{Elections}

%%% A number of general elections concepts are necessary to specify
%%% the RLA Tool. Some are generic to all elections, and others are
%%% specific to Colorado.

elections: THEORY
BEGIN
%%% Voters are the most important concept in elections, as they are
%%% who elections are for, and who make the choices that determine the
%%% outcome of legitimate elections. Some voters are UOCAVA
%%% voters. What follows is one way to formalize such, simply stating
%%% that the type uocava\_voter is a predicate on the type
%%% voter. Consequently, all voters are either UOCAVA or not.
  person: TYPE
  voter: TYPE FROM person
  elector: TYPE = voter
  uocava_voter: TYPE from voter

%%% Candidates run for office to represent voters. A person can be a
%%% voter, a candidate, both, or neither.
  candidate: TYPE FROM person

%%% Elections focus on contests, each of which represents a set of
%%% choices that voters can make. Making a legal choice ranges
%%% enormously across the Earth, from marking a vote for a candidate
%%% by filling in a single bubble to enumerating a total order on all
%%% choices in a contest. Across a given ballot, each contest has a
%%% unique name.
% @review CDOS will there be one risk limit? If more than one, then
% system must provide a way to map contests to risk limits.

  contest: TYPE
  contest_name?: [contest -> string]
% @trace RDPR-6-Jul-2017 Section 25.1.2
% @description A contest selected by the Secretary of State for a
% risk-limiting audit.
  audited_contest: TYPE FROM contest
  opportunistic_contest: TYPE FROM contest
  full_hand_count_contest: TYPE FROM contest
% @todo Contest name uniqueness.

  outcome: TYPE
  election_outcome: TYPE = set[outcome]
  wrong_outcome: TYPE FROM election_outcome
  
% @trace RDPR-6-Jul-2017 Section 25.1.5
% @description The presumed winning and losing candidates or voting
% choices of a ballot contest as reflected in preliminary results.
% @todo kiniry TBD
  reported_tabulation_outcome: TYPE FROM election_outcome

% @trace RDPR-6-Jul-2017 Section 25.2.2(D)
% @explanation On the ninth day after Election Day, the county must
% finish tabulating all ballots other than provisional ballots and
% property owner ballots.
  rla_tabulation_outcome: TYPE FROM election_outcome

%%% Elections are defined across cohorts of voters arranged in any
%%% number of ways---geographic, political, professional, and more. In
%%% Colorado, elections are organized across counties and the entire
%%% state. Each county has a name and a county number, both of which
%%% are unique across the state.

  county: TYPE
  county_name?: [county -> string]
  county_number?: [county -> nat]
  state: TYPE = set[county]
  nation: TYPE = set[state]
  organization: TYPE

  s: VAR state
  c1, c2: VAR county

  county_names_unique: AXIOM
  (FORALL s, c1, c2:
    member(c1, s) AND member(c2, s) AND
      county_name?(c1) = county_name?(c2)
    IMPLIES c1 = c2)
  county_numbers_unique: AXIOM
  (FORALL s, c1, c2:
    member(c1, s) AND member(c2, s) AND
      county_number?(c1) = county_number?(c2)
    IMPLIES c1 = c2)
  
  election_canvass: TYPE
  political_party: TYPE
% @trace RDPR-6-Jul-2017 Section 25.1.1
% @description The page or pages of the Secretary of State’s website
% devoted to risk-limiting audits.
  audit_center: TYPE
  ballot: TYPE % = [election, set[contest], ballot_id]
END elections

%%% Elections come in many forms: public and private elections;
%%% national and local elections; etc. This RLA Tool focuses on state
%%% elections in Colorado, so we only model that one kind of
%%% election. Several other kinds of elections are mentioned as well.

% @relation state_election inherit election
% @relation national_election inherit election
% @relation private_election inherit election
election: DATATYPE WITH SUBTYPES
  state_election, national_election, private_election
BEGIN
  IMPORTING elections
  
  is_state_election?(s: state, c: set[contest]):
    make_state_election: state_election
  is_national_election?(n: nation, c: set[contest]):
    make_national_election: national_election
  is_private_election?(o: organization, c: set[contest]):
    make_private_election: private_election  
END election

%+END elections

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN ballots

%%% \section{Ballots}

%%% The second basic concept of elections that we need to specify is
%%% the ballot. Ballots are the means by which voters indicate their
%%% preferences for candidates in contests and choices in ballot
%%% questions.
%%%
%%% Ballots are stored by one of several possible means. Some ballot
%%% storage containers are secure, others are not. Some facilitate an
%%% easy means by which to find a particular ballots, others do not.

% @relation box inherit storage_container
% @relation bin inherit storage_container
% @relation ballot_box inherit storage_container
storage_container: DATATYPE WITH SUBTYPES box, bin, ballot_box
BEGIN
  IMPORTING elections
  
  box?(ballots:list[ballot]): make_box: box
  bin?(ballots:list[ballot]): make_bin: bin
  ballot_box?(ballots:list[ballot]): make_ballot_box: ballot_box

% @todo add "secure: pred[ballot_storage]"

END storage_container

elections_equipment: THEORY
BEGIN
  IMPORTING storage_container
  
  voting_system: TYPE
  dominion_voting_system: TYPE FROM voting_system
  
  scanner: TYPE
  scanner_id_number: TYPE
  id_number?: [scanner -> scanner_id_number]
% @todo Each scanner has a unique id number.
  vvpat: TYPE
  verified?: TYPE = pred[storage_container]

  vvsg_log: TYPE
END elections_equipment

ballots: THEORY
BEGIN
  IMPORTING elections, elections_equipment, storage_container

%%% Several of our concepts are simply numbers. For example, ballot
%%% identifiers (ids), batch numbers, and batch sizes are all just
%%% natural numbers (integers starting from zero).

  ballot_id: TYPE = nat
  batch_number: TYPE = nat
  batch_size: TYPE = nat

%%% Ballots are marked by voters or ballot marking devices.  A ballot
%%% mark is any kind of mark made on a ballot that is not found on a
%%% blank ballot. A voter\_marking is any mark made by a voter. An
%%% ambiguous mark is a mark for which there is ambiguity in its
%%% interpretation (voter or machine). A stray mark is a mark that is
%%% outside of the legitimate regions of a ballot, such as hesitation
%%% marks outside of the mark regions for a contest or marks made by
%%% coffee spilled on a paper ballot.

  ballot_mark: TYPE
  voter_marking: TYPE FROM ballot_mark
  ambiguous_mark: TYPE FROM ballot_mark
  stray_mark: TYPE FROM ballot_mark

%%% Ballots come in several varieties.  All ballots are represented in
%%% a digital fashion (a scan, PDF, etc.), or are paper ballots, or
%%% both. Ballots are also classified based upon where they originate,
%%% such as delivery via mail, UOCAVA ballots, early ballots,
%%% etc. Ballots are also either tabulated or not. Note that none of
%%% these categories of ballots are mutually exclusive.

% @description The legally recognized means by which a voter can
% express his or her choices in one or more contests in an election.
  digital_ballot: TYPE FROM ballot
  paper_ballot: TYPE FROM ballot
  mail_ballot: TYPE FROM ballot
  uocava_ballot: TYPE FROM ballot
  early_ballot: TYPE FROM ballot
  tabulated_ballot: TYPE FROM ballot
  provisional_ballot: TYPE FROM ballot
  property_owner_ballot: TYPE FROM ballot
  original_ballot: TYPE FROM ballot
  duplicated_ballot: TYPE FROM ballot
  non_voter_verifiable_ballot: TYPE FROM ballot
  voter_verifiable_ballot: TYPE FROM ballot
  phantom_ballot: TYPE FROM ballot

%%% Ballots can be in various stages of processing, as implicitly
%%% mentioned in the C.R.S.
  verified_accepted?: pred[mail_ballot]

%%% Each ballot has a single ballot style, which indicates (at least)
%%% the contests that are listed on that ballot. Ballot styles are
%%% usually encoded as natural numbers.

% @description The concrete presentation of a ballot configuration.
  ballot_style: TYPE = nat
  ballot_style?: [ballot -> ballot_style]

% @description A decision to be made, either the selection of one or
% more candidates for an office or the choice of a course of action.
  ballot_contest: TYPE = contest
  choice: TYPE

% @description A batch is a set of ballots.  
  batch: TYPE = set[ballot]

%%% The county must secure and maintain in sealed ballot containers
%%% all tabulated ballots in the batches and order they are
%%% scanned. The county must maintain and document uninterrupted
%%% chain-of-custody for each ballot storage container.

  imprinted_ballot: TYPE FROM ballot
  ballot_certification: TYPE

END ballots

%%% \subsection{Ballot Manifests}

% @trace RDPR-6-Jul-2017 Section 25.2.2(C)

%%% While tabulating ballots, the county must maintain an accurate
%%% ballot manifest in a form approved by the Secretary of State. At a
%%% minimum, the ballot manifest must uniquely identify for each
%%% tabulated ballot the scanner on which the ballot is scanned, the
%%% ballot batch of which the ballot is a part, the number of ballots
%%% in the batch, and the storage container in which the ballot batch
%%% is stored after tabulation.

ballot_manifests: THEORY
BEGIN
  IMPORTING ballots, elections_equipment, information_systems

  ballot_manifest_info: TYPE =
    [scanner_id_number, batch_number, batch_size, storage_container]
  ballot_manifest: TYPE = set[ballot_manifest_info]
  verified?: pred[ballot_manifest]
  ballot_manifest_file: TYPE FROM file
  export_ballot_manifest: [voting_system -> ballot_manifest_file]

END ballot_manifests

%%% The interpretation of the meaning of a voter's choice in a single
%%% ballot contest is either a legal vote, an overvote, or an
%%% undervote.

% @relation well_formed_vote inherit vote
% @relation overvote inherit vote
% @relation undervote inherit vote
vote: DATATYPE WITH SUBTYPES well_formed_vote, overvote, undervote
BEGIN
  IMPORTING ballots

% @description A legal selection of zero or more choices in a ballot contest.
  well_formed_vote?(choices:set[choice]):
    make_well_formed_vote: well_formed_vote
% @description A (typically deemed improper) selection of too many
% choices in a ballot contest.
  overvote?(choices:set[choice]): make_overvote: overvote
% @description A (sometimes deemed improper) selection of too few
% choices in a ballot contest.
  undervote?(choices:set[choice]): make_undervote: undervote
END vote

ballot_interpretation: THEORY
BEGIN
  IMPORTING ballots, vote

% @description A CVR is a cast vote record denoting the interpretation
% of a set of votes for a specific election and a single voter.
  cast_vote_record: TYPE = set[set[choice]]

END ballot_interpretation

ballots_collections: THEORY
BEGIN
  IMPORTING ballots

%%% Ballots are often ordered, such as after they are hand or machine
%%% sorted, when they are kept in storage that maintains order, or an
%%% order is induced upon them by a random shuffle.
  ballot_order: TYPE = list[ballot]

%%% Sometimes, but not always, a total order is induced by ballot ids.
% @todo Introduce something like
% < (b1: ballot, b2: ballot): bool
% ballot_ids_unique_and_induce_order: POSTULATE strict_total_order?(<)

END ballots_collections

%+END ballots

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN ifr

%%% \section{Instructions, Forms, and Reports}

%%% Elections have all kinds of different published instructions,
%%% forms, and reports. We enumerate a few here that are specific to
%%% Colorado, and the RLA Tool in particular.

instructions_forms_reports: THEORY
BEGIN
  IMPORTING information_systems, ballot_manifests, election, audits
  
  report: TYPE = [# name: string #]
% @review CDOS The contents of this report are underspecified at the
% moment. See submit_audit_mistake_report below for more information.
  audit_mistake_report: TYPE =
    [# name: string, mistake_report: string #]
  empty_audit_mistake_report: audit_mistake_report

% @review CDOS The contents of this report are underspecified at the
% moment. See submit_audit_report and sign_intermediate_audit_report
% below for more information.
% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: The
% Audit Board and county admin will sign off on each round until the
% audit completed.
  audit_report: TYPE =
    [# name: string,
       election: election,
       audit_board: audit_board,
       county_administrator: county_administrator #]

% @trace RDPR-6-Jul-2017 Section 25.2.2(D)(1)
% @description This report shows the total number of overvotes,
% undervotes, blank-voted contests, and valid write-in votes for (an
% election? | a contest?).
% @review CDOS Need clarity on the specification of a Dominion summary
% report.
  summary_results_report: TYPE =
    [overvotes: nat, undervotes: nat,
     blank_voted_contests: nat, valid_write_in_votes: nat]

% @trace RDPR-6-Jul-2017 Section 25.2.2(D)(2)
% @description A file suitable for uploading to the Secretary of
% State’s election night reporting system.
% @review CDOS Double-check that we are not responsible for this
% feature, as it mentions the election night reporting systems, about
% which we know nothing.
  results_file: TYPE FROM file

  form: TYPE
  sos_audit_form: TYPE

  instructions: TYPE
  ballot_instructions: TYPE FROM instructions
  sos_voter_intent_guide: TYPE FROM instructions

% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: The
% tool must also provide a printable list of ballot for each round.
  ballots_under_audit_instructions: TYPE =
    [ sequence[ballot], sequence[ballot_style],
      sequence[ballot_manifest_info] ]

END instructions_forms_reports

%+END ifr

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN roles

%%% \section{Roles}

%%% Within the RLA Tool, a person involved with the system can have a
%%% number of roles. Some of these roles are mutually exclusive for
%%% legal reasons.

roles: THEORY
BEGIN
  IMPORTING elections, fafessl

  audit_board_member: TYPE FROM person
  canvas_board: TYPE = set[person]

  colorado_department_of_state: TYPE
  cdos: TYPE = colorado_department_of_state

  sos: TYPE FROM person
  state?: [sos -> state]

  county_clerk: TYPE FROM person
  county?: [county_clerk -> county]
% @review CDOS If names of audit board members are to be visible
% on the public website, are they published directly by the 
% County Audit Admins? If not, to whom do the County 
% Admins submit the names, and by whom are the names published 
% to the public website? What happens if a County
% fails to submit names?

% @review CDOS Roles that are currently under-defined and need
% clarity. In particular, are there any lurking restrictions in roles
% such that a person cannot have two kinds of roles
% simultaneously. E.g., can a candidate be an audit board of their own
% election? Can an county administrator be a candidate? Can the SOS be
% an audit board member? Etc.
  administrator: TYPE FROM person
  audit_supervisor: TYPE FROM person
% @contraint CDOS states that they want to start with at least one
% designated official per county, but must have the ability to create
% credentials for additional users.
% @trace email from Jerome Lovato on 12 July 2017
  county_administrator: TYPE FROM administrator
  state_administrator: TYPE FROM administrator
  
% @review CDOS Who bootstraps authentication? Who has the right to
% identify people who should have credentials and generate and issue
% those credentials? How do they (singular or plural) authenticate to
% the system. We'll put in place a bootstrapping role for the moment,
% the system administrator.

% @review CDOS while members of the audit board might not be
% authenticated users of the RLA tool, they do "sign off" on the audit
% they performed.  Do they also "sign in" before audit starts?

% @review CDOS what happens if the Audit Board cannot find 
% the ballot expected by the RLA tool?

  system_administrator: TYPE FROM administrator

% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: A
% candidate cannot be an administrator.
  candiates_cannot_be_administrators: AXIOM TBD

END roles

canvas_boards: THEORY
BEGIN
  IMPORTING roles, election

  canvas_board?: [election -> canvas_board]
END canvas_boards

%+END roles

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% \section{Cryptography}

%%% We will add additional cryptographic primitives here as required.

cryptography: THEORY
BEGIN
  digest: TYPE = bvec[256]
  sha256: [size: nat, bvec[size] -> digest]
END cryptography

%%% \subsection{Randomness}

%%% High quality randomness is key to the legitimacy of any
%%% risk-limiting audit.

randomness: THEORY
BEGIN
  unit: TYPE

% @trace RDPR-6-Jul-2017 Section 25.2.2(H)

%%% \subsubsection{Random Seed}

%%% The Secretary of State will convene a public meeting on the tenth
%%% day after election day to establish a random seed for use with the
%%% Secretary of State’s RLA tool’s pseudo-random number generator
%%% based on Philip Stark’s online tool, \emph{Pseudo-random Number
%%% Generator using SHA-256}. This material is incorporated by
%%% reference in the election rules and does not include later
%%% amendments or editions. The following material incorporated by
%%% reference is posted on the Secretary of State website and
%%% available for review by the public during regular business hours
%%% at the colorado secretary of state’s office: pseudo-random number
%%% generator using SHA-256 available at
%%% \url{https://www.stat.berkeley.edu/~stark/java/html/sha256rand.htm}. The
%%% Secretary of State will give public notice of the meeting at least
%%% seven calendar days in advance. The seed is a number consisting of
%%% at least 20 digits, and each digit will be selected in order by
%%% sequential rolls of a 10-sided die. The Secretary of State will
%%% randomly select members of the public who attend the meeting to
%%% take turns rolling the die, and designate one or more staff
%%% members to take turns rolling the die in the event that no members
%%% of the public attend the meeting. The Secretary of State will
%%% publish the seed on the audit center immediately after it is
%%% established.
  seed: TYPE = {n: nat | 9999999999999999999 < n}
  rng: TYPE = [unit -> nat]
  seeded_prng: TYPE = [seed -> rng]
END randomness

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN audits

%%% \section{Audits}

%%% Election audits come in many forms. The two main kinds of audits
%%% we focus on in this system are ballot polling audits and
%%% comparison audits, both of which are risk-limiting audits.

audits: THEORY
BEGIN
  IMPORTING roles
  
  audit: TYPE

%%% Audits are run by audit boards, whose members come from various
%%% constituancies and have various roles. Deciding who is on an audit
%%% board is also usually a matter of law, policy, and history.

% @review CDOS Must audit boards have a minimum number of members?
% A maximum?
% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: The
% audit board has exactly two members.
  audit_board: TYPE = set[audit_board_member]
  audit_board_size: AXIOM TBD

%%% These two terms are used but underdefined at this time.
  audit_mistake: TYPE
  audit_progress: TYPE

%%% The count of the total number of ballots to audit varies across
%%% audit types. For example, historically in Colorado random audits
%%% must audit 500 ballots or 5\% of all ballots, whichever is
%%% smaller.
  ballots_to_audit: TYPE = nat

%%% We list various other terms relating to audits here. They will be
%%% defined and refined in later versions of the domain model.
  contest_margin: TYPE = nat
  margin: TYPE = real

  digital_ballot_adjudication: TYPE
  manual_ballot_adjudication: TYPE

% @trace struck from RDPR-6-Jul-2017 old Section 25.1.5

% @description The smallest reported margin in votes between the
% reported contest winner with the least votes in the contest, and the
% reported contest loser with the most votes in the contest, divided
% by the number of ballots counted in that contest.

% @example For example, if the voting system tabulated 10,000 ballots
% in an audited contest, and the reported winning candidate with the
% fewest votes received 4,000 votes, and the reported losing candidate
% with the most votes received 3,500 votes, the diluted margin of the
% contest is 5% [(4,000 – 3,500) / 10,000]
  diluted_margin: TYPE FROM margin

% @trace struck from RDPR-6-Jul-2017 old Section 25.1.6

% @description A circumstance in which the audit board’s
% interpretation of ballot markings reveals that the winner with the
% fewest votes received fewer votes than the voting system’s
% interpretation of the same markings as reflected in the CVR.

% @example For example, if the CVR reflects an undervote in the
% audited contest, and the audit board’s interpretation of the
% corresponding paper ballot reflects a vote for the loser with the
% most votes in that contest, the CVR contains a one-vote
% overstatement. if the CVR reflects a vote for the winner with the
% fewest votes, and the audit board’s interpretation of the paper
% ballot reflects a vote for the loser with the most votes, the
% preliminary results contain a two-vote overstatement.
  margin_overstatement: TYPE = nat

% @trace struck from RDPR-6-Jul-2017 old Section 25.1.7

% @description A circumstance in which the audit board’s
% interpretation of ballot markings reveals that the contest winner
% with the fewest votes received more votes than the voting system’s
% interpretation of the same markings as reflected in the CVR.

% @example For example, if the CVR reflects an undervote in the
% audited contest, and the audit board’s interpretation of the
% corresponding paper ballot reflects a vote for the winner with the
% fewest votes in that contest, the CVR contains a one-vote
% understatement. If the CVR reflects a vote for the loser with the
% most votes, and the audit board’s interpretation of the paper ballot
% reflects a vote for the winner with the fewest votes, the CVR
% contains a two-vote understatement.
  margin_understatement: TYPE = nat  

  random_audit: TYPE
END audits

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% \section{RLAs}

%%% Audits ideally come after all the votes are tabulated, canvassed
%%% and reconciled. In Colorado, however, since the certification
%%% deadline comes shortly after the last date for voters to cure
%%% signature verification problems, etc., there is not always enough
%%% time to do them sequentially.  An updated vote count may be
%%% released at the end of the tabulation and canvass, and the risk
%%% limit of the audit needs to apply to the updated outcome.
%%%
%%% Given these constraints, it is generally best to audit
%%% conservatively.  For example, we assume that any late-tabulation
%%% ballots are cast for the losers.  As discussed in
%%% [BanuelosEtAl12], counties should add a batch of phantom ballots
%%% to the manifest, one for each possible late-tabulation ballot.
%%% Another possibility, if it turns out that not enough phantom
%%% ballots were added, would be to use more flexible Bayes audit
%%% techniques to do a followup audit after the late-tabulation
%%% ballots and tabulations are available; however, that capability is
%%% not implemented at this time.

rlas: THEORY
BEGIN
  IMPORTING elections

% @trace RDPR-6-Jul-2017 Section 25.1.6
% @description The largest statistical probability that an incorrect
% reported tabulation outcome is not detected and corrected in a
% risk-limiting audit.
  risk_limit: TYPE = {n : nonneg_real | n <= 100}

% @trace RDPR-6-Jul-2017 Section 25.1.7
% @description A post-election audit of votes on paper ballots and
% VVPAT records, conducted in accordance with Section 1-7-515, C.R.S.,
% and Rule 25.2, which has a pre-specified minimum chance of requiring
% a full hand count if the outcome of a full hand count would differ
% from the reported tabulation outcome.
  risk_limiting_audit: TYPE
  RLA: TYPE = risk_limiting_audit

% @trace RDPR-6-Jul-2017 Section 25.1.3
% @description A type of risk-limiting audit in which the audit board
% examines and reports to the Secretary of State voter markings on
% randomly selected ballots seeking strong evidence that the reported
% tabulation outcome is correct.
  ballot_polling_audit: TYPE FROM risk_limiting_audit

% @trace RDPR-6-Jul-2017 Section 25.1.4
% @description A type of risk-limiting audit in which the audit board
% examines and reports to the secretary of state voter markings on
% randomly selected ballots, and then compared compares them to the
% voting system’s tabulation as reflected in the corresponding cast
% vote records.
  comparison_audit: TYPE FROM risk_limiting_audit

%%% These are some terms of the art that we will more carefully
%%% define as the model is refined.
  discrepency: TYPE
  random: TYPE
  sample_size: TYPE = nat
  
% @trace RDPR-6-Jul-2017 Section 25.1.2
% @description The audited contest determines the number of ballots
% that must be examined and verified during the RLA.
  number_of_ballots_to_audit: [audited_contest -> nat]
END rlas

%+END audits

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN cvrs

%%% \section{Cast Vote Records}

%%% Cast vote records, also known as CVRs, are the digital
%%% interpretations of paper ballot records by a computer. They
%%% frequently, but not always, contain an interpretation of all
%%% contests on a ballot. CVRs are sometimes syntactically written as
%%% comma-separated values, and other times in plain English. Some
%%% CVRs use a election-specific encoding scheme to represent choices
%%% (e.g., a '1' means "John Doe"); others use plain English.
%%%
%%% CDOS requirements mandate that CVRs are exported and uploaded to
%%% the RLA back-end as CSV files by county officials using their
%%% voting systems and the RLA Tool, respectively.

% @todo kiniry For a given election, there must be a 1-1
% correspondence between its ballots and its CVRs.

cast_vote_records: THEORY
BEGIN
  IMPORTING vote, information_systems, elections_equipment
  
  cvr: TYPE = set[vote]
  verified?: pred[cvr]
% @trace Task order #1, Exhibit A
  as_csv: [cvr -> csv]
  cvr_file: TYPE FROM file
% @trace RDPR-6-Jul-2017 Section 25.2.2(D)(3)
% @description Immediately after completing the RLA tabulation ... the
% county must also generate and preserve a CVR export.
  export_cvr: [voting_system -> cvr_file]

% @todo It is unclear what a CVR number is, if anything.
  cvr_number: TYPE = nat
END cast_vote_records

%+END cvrs

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN ui

%%% \section{User Interfaces}

%%% The user interfaces of the system are the visible interactive
%%% parts of the application. There are three different user
%%% interfaces in the RLA Tool. The precise names of these interfaces
%%% are still under discussion; one is for CDOS personnel responsible
%%% for the audit at the state-level, one is for county personnel at
%%% the county-level, and one is for audit board members.

user_interface: DATATYPE
  WITH SUBTYPES uploading_interface, cvr_uploading_interface,
                county_auditing_interface, audit_adjudication_interface,
                public_interface
BEGIN
  uploading_interface?:
    make_uploading_interface: uploading_interface
  cvr_uploading_interface?:
    make_cvr_uploading_interface: cvr_uploading_interface
  county_auditing_interface?:
    make_county_auditing_interface: county_auditing_interface
  audit_adjudication_interface?:
    make_audit_adjudication_interface: audit_adjudication_interface
% @todo in the audit adjudication interface, it must be possible to classify
% a ballot as unauditable either due to not finding a voter-verifiable paper
% record or due to it being a phantom ballot
  public_interface?:
    make_public_interface: public_interface
END user_interface

%%% After a county administrator attempts to upload artifacts to the
%%% RLA system's server, one of several different messages is shown.
%%% Each is self-explanatory in this domain model, and each must be
%%% used in a scenario of the system.

% @relation ok inherit upload_system_message
% @relation hash_wrong inherit upload_system_message
% @relation file_type_wrong inherit upload_system_message
% @relation data_transmission_interrupted inherit upload_system_message
% @relation too_late inherit upload_system_message
upload_system_message: DATATYPE
  WITH SUBTYPES upload_successful, hash_wrong, file_type_wrong,
                data_transmission_interrupted, too_late
BEGIN
  upload_successful?: make_upload_successful: upload_successful
  hash_wrong?: make_hash_wrong: hash_wrong
  file_type_wrong?: make_file_type_wrong: file_type_wrong
  data_transmission_interrupted?: make_data_transmission_interrupted:
    data_transmission_interrupted
  too_late?: make_too_late: too_late
END upload_system_message

%%% Authentication attempts can result in two different kinds of
%%% message: either a person authenticated successfully, or they did
%%% not.

% @relation successful_authentication inherit authentication_message
% @relation unsuccessful_authentication inherit authentication_message
authentication_message: DATATYPE
  WITH SUBTYPES successful_authentication, unsuccessful_authentication
BEGIN
  successful_authentication?: make_successful_authentication:
    successful_authentication
  unsuccessful_authentication?: make_unsuccessful_authentication:
    unsuccessful_authentication
END authentication_message

%+END ui

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN dashboards

%%% \section{Dashboards}

%%% The system has several dashboards that are the main user
%%% interfaces to the system. State officials use the state-wide
%%% dashboard; county officials use the county dashboard; audit board
%%% members use the audit board dashboard; and the general public uses
%%% the public dashboard.

% @review kiniry @review dmz CDOS may want to create and edit static
% content on the public dashboard, e.g., time and location of meeting
% to determine the seed for the pseudo-random number generator. Let's
% not forget to model that in our specification.

% @relation state_wide_dashboard inherit dashboard
% @relation county_dashboard inherit dashboard
% @relation audit_board_dashboard inherit dashboard
% @relation public_dashboard inherit dashboard
dashboard: DATATYPE WITH SUBTYPES
  state_wide_dashboard, county_dashboard, audit_board_dashboard,
  public_dashboard
BEGIN
% @description The overall status of the state-wide audit is
% summarized in the state-wide dashboard.
  state_wide_dashboard?: make_state_wide_dashboard: state_wide_dashboard
% @description The county dashboard is used to communicate with CDOS,
% setup the local RLA, and observe the status of the ongoing or
% finished RLA.
  county_dashboard?: make_county_dashboard: county_dashboard
% @description The audit board dashboard is used by the audit board
% members to understand the state of the audit and to facilitate the
% audit each ballot under audit.
  audit_board_dashboard?: make_audit_board_dashboard: audit_board_dashboard
% @description The public dashboard is used by the general public to
% understand the state of the current state RLA.
  public_dashboard?: make_public_dashboard: public_dashboard
END dashboard

%%% \subsection{State-wide Dashboard}

%%% The status of uploaded data will be summarized in a state-wide
%%% dashboard, along with information on which counties have not yet
%%% uploaded their CVRs, and uploads that have formatting or content
%%% issues. The status of data, and results as audits are performed,
%%% will be provided for each contest to be audited.

% @trace Principly RDPR-6-Jul-2017 Section 25.2.2
state_wide_dashboard: THEORY
BEGIN
  IMPORTING dashboard, elections, rlas, fafessl,
            instructions_forms_reports

%%% CDOS staff, after authenticating to the state-wide dashboard, can
%%% see the status of the entire election. Various static information
%%% about the election is displayed along with dynamic information,
%%% the type and content of which is dependent upon the current audit
%%% stage.

  audit_stage: TYPE =
    { initial, authenticated, risk_limits_set,
      contests_to_audit_identified, random_seed_published,
      ballot_order_defined, audit_ongoing, audit_complete,
      audit_results_published }

% @trace RDPR-6-Jul-2017 Section 25.2.2(A)
%%% No later than 30 days before Election Day, the Secretary of State
%%% will establish and publish on the audit center the risk limit(s)
%%% that will apply in RLAs for that election. The Secretary of State
%%% may establish different risk limits for comparison audits and
%%% ballot polling audits, but in no event will the risk limit exceed
%%% five percent.
  establish_risk_limit_comparison_audits:
    [state_wide_dashboard, {r: risk_limit | r <= 5} -> state_wide_dashboard]
  establish_risk_limit_ballot_polling_audits:
    [state_wide_dashboard, {r: risk_limit | r <= 5} -> state_wide_dashboard]

  county_status: TYPE =
    { no_data, cvrs_uploaded_successfully, error_in_uploaded_data }
  upload_status: [state_wide_dashboard -> set[county_status]]

% @trace RDPR-6-Jul-2017 Section 25.2.2(I)

%%% \subsubsection{Selection of Audited Contests}

%%% No later than 5:00 PM MT on the Friday after Election Day, the
%%% Secretary of State will select for audit at least one statewide
%%% contest, and for each county at least one countywide contest. The
%%% Secretary of State will select other ballot contests for audit if
%%% in any particular election there is no statewide contest or a
%%% countywide contest in any county. The Secretary of State will
%%% publish a complete list of all audited contests on the audit
%%% center. The Secretary of State will consider the following factors
%%% in determining which contests to audit:
%%%
%%% \begin{enumerate}

%%% \item The closeness of the reported tabulation outcome of the contests;

%%% \item The geographical scope of the contests;

%%% \item Any cause for concern regarding the accuracy of the reported
%%% tabulation outcome of the contests;

%%% \item Any benefits that may result from opportunistically auditing
%%% certain contests; and

%%% \item The ability of the county clerks to complete the audit before
%%% the canvass deadline.

%%% \end{enumerate}

  audit_reason: TYPE =
    { state_wide_contest, county_wide_contest, close_contest,
      geographical_scope, concern_regarding_accuracy,
      opportunitic_benefits, county_clerk_ability }

  select_contest_for_comparison_audit:
    [contest, audit_reason -> audited_contest]
% @trace RDPR-6-Jul-2017 Section 25.2.2(I)
% If there is at least one statewide contest, then at least one has to
% be selected.
  at_least_one_statewide_contest: AXIOM TBD
% If there is at least one countywide contest, then at least one has
% to be selected.
  at_least_one_countywide_contest_per_county: AXIOM TBD

  select_contest_for_opportunistic_audit:
    [contest, audit_reason -> opportunistic_contest]

%%% Ballots can be randomly selected for audit in two ways, either by:

%%% \begin{enumerate}

%%% \item permuting all ballots and auditing a prefix of ballots
%%% (thereby auditing ballots "with no replacement"); or 

%%% \item randomly selecting ballots ballot-by-ballot (thereby
%%% auditing ballots "with replacement" as the same ballot may be
%%% audited multiple times).

%%% \end{enumerate}

% @todo kiniry Obviously this type has to be strengthened considerably
% to guarantee permutation. That is, that both the set and the list are
% finite and converting the list into a set results in a set equivalent
% to the original set.
  ballot_permutation:
    [set[ballot] -> list[ballot]]
% Note that sequences are infinite.
  random_list_of_ballots:
    [set[ballot] -> sequence[ballot]]

% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: The
% tool must also provide a printable list of ballot for each round.
% At a minimum, the list must contain ballot style and ballot manifest
% information.
  print_ballots_under_audit_list:
    [sequence[ballot] -> ballots_under_audit_instructions]

% @trace RDPR-6-Jul-2017 Section 25.2.2(K)

%%% \subsection{Random Selection of Ballots for Audit}

%%% The Secretary of State will randomly select the individual ballots
%%% to audit. The Secretary of State will use a pseudo-random number
%%% generator with the seed established under subsection (H) of this
%%% rule to identify individual ballots as reflected in the county
%%% ballot manifests. The Secretary of State will notify each county
%%% of, and publish on the audit center, the randomly selected ballots
%%% that each county must audit no later than 11:59 PM MT on the
%%% tenth day after Election Day.
  public_ballots_to_audit:
    [state_wide_dashboard, list[ballot] -> state_wide_dashboard]

%%% The Secretary of State can indicate that a contest must be a full
%%% hand count contest.
% @review CDOS We need to know what the process is that they want for
% this functionality.
  designate_full_hand_count_contest:
    [state_wide_dashboard, contest -> state_wide_dashboard]

END state_wide_dashboard

%%% \subsection{County Dashboard}

%%% The County dashboard is used by county officials to communicate
%%% with the Secretary of State for the purpose of planning and
%%% executing risk-limiting audits.

county_dashboard: THEORY
BEGIN
  IMPORTING dashboard, information_systems, upload_system_message,
            election, roles, cast_vote_records, ballot_manifests,
            cryptography, server
%%% Some of the generation information contained in the county
%%% dashboard is stipulated by C.R.S.

% @trace RDPR-6-Jul-2017 Section 25.2
  general_static_information: string

% @trace RDPR-6-Jul-2017 Section 25.2.2(B)

% @explanation No later than 15 days before election day, the
% designated election official must appoint an audit board to conduct
% the risk-limiting audit. The audit board must consist of electors
% nominated by the major political party county chairpersons. The
% designated election official must give written notice to the county
% chairpersons of their obligation to nominate audit board members and
% may designate appropriately affiliated electors as audit board
% members if one or both county chairpersons fail to do so in a timely
% manner. At least two canvass board members must observe the RLA, and
% members of the canvass board may serve as members of the audit
% board. The designated election official, members of his or her
% staff, and other duly appointed election judges may assist the audit
% board in conducting the audit. To the extent practicable, the audit
% board should not consist of individuals who participated in ballot
% resolution or adjudication during the election being audited.
  establish_audit_board:
    [county_dashboard, set[elector] -> county_dashboard]

%%% \subsubsection{Verification of Election Report Artifacts}

%%% To prepare for uploading of artifacts to the Secretary of State,
%%% counties conducting a comparison audit must verify several
%%% properties (all of which are discussed in
%%% \autoref{sec:System_Assumptions}). After verifying those
%%% properties, counties must generate a digest of the CVR file using
%%% a hash designated by the Secretary of State.

%%% \subsubsection{Digest Generation}

% @trace RDPR-6-Jul-2017 Section 25.2.2(E)(5)
% @trace RDPR-6-Jul-2017 Section 25.2.2(F)

%%% After verifying the accuracy of the CVR export, the county must
%%% apply a hash value to the CVR export file using the hash value
%%% utility provided by the Secretary of State.
%%%
%%% Note that this feature is implemented by a tool provided by the
%%% Secretary of State. We have not been asked to produce such a tool,
%%% though one could compute the hash of a file locally in a web
%%% browser, so this could be part of our system. From an assurance
%%% standpoint it is a better idea to use a completely separate tool,
%%% developed independently from us, to perform this hashing.

% @review CDOS Confirm that we have nothing to do with recommending,
% creating, or managing these two hashing tools to be used by county
% officials.
  generate_cvr_digest: [cvr_file -> digest]

% @trace RDPR-6-Jul-2017 Section 25.2.2(F)(1)

%%% Each county performing a comparison audit must upload a hash
%%% (digest) of its ballot manifest to the RLA Tool.

  generate_ballot_manifest_digest: [ballot_manifest_file -> digest]

%%% \subsubsection{Comparison Audit Uploads}

% @todo kiniry Improve/strengthen the dependent types in these upload
% signatures below.

%%% Each county conducting a comparison audit must upload:

%%% \begin{enumerate}

%%% \item its verified and hashed ballot manifest to the RLA Tool;

  county_upload_verified_ballot_manifest:
    [county_dashboard, ballot_manifest_file, digest ->
     [county_dashboard, email, upload_system_message]]

%%% \item its verified and hashed CVR export to the RLA Tool; and

  upload_verified_cvrs:
    [county_dashboard, cvr_file, digest ->
     [county_dashboard, email, upload_system_message]]

%%% \item its RLA tabulation results export to the Secretary of State’s
%%% election night reporting system.

%%% \end{enumerate}

  upload_tabulation_results:
    [enr_server, rla_tabulation_outcome -> enr_server]

%%% \subsubsection{Ballot Polling Audit Uploads}

% @trace RDPR-6-Jul-2017 Section 25.2.2(G)

%%% Mo later than 11:59 PM MT on the ninth day after Election Day,
%%% each county conducting a ballot polling audit must upload:

%%% \begin{enumerate}

%%% \item its verified and hashed ballot manifest to the RLA tool; and

%%% \item its RLA tabulation results export to the Secretary of State’s
%%% election night reporting system.

%%% \end{enumerate}

%%% Note that both of these uploads are facilitated by the functions
%%% defined above, as their types do not mandate a particular kind of
%%% audit on the county.

END county_dashboard

%%% \subsection{Audit Board Dashboard}

% @trace RDPR-6-Jul-2017 Section 25.2.3

%%% There are a number of assumptions that the RLA Tool audit board
%%% dashboard makes with respect to the C.R.S. It also facilitates the
%%% comparison audit.

audit_board_dashboard: THEORY
BEGIN
  IMPORTING dashboard, ballots, storage_container, audits,
            cast_vote_records, instructions_forms_reports

%%%% The audit board must locate and retrieve from the appropriate
%%%% storage container each randomly selected ballot. The audit board
%%%% must verify that the seals on the appropriate storage containers
%%%% are those recorded on the applicable chain-of-custody logs.
  ballots_to_audit_to_storage_container_list:
    [list[ballot] -> list[storage_container]]
  verify_all_seals_on_storage_containers:
    [list[storage_container] -> list[storage_container]]

%%% The audit board must examine each randomly selected ballot or
%%% VVPAT and report the voter markings or choices using the RLA Tool
%%% or other means specified by the Secretary of State.

  next_ballot_for_audit:
    [audit_board_dashboard -> [ballot, audit_board_dashboard]]

% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: The
% Audit Board will enter the choices for the entire ballot including
% overvotes and undervotes. The tool must not allow the Audit Board to
% skip contests.
  report_markings:
    [audit_board_dashboard, list[ballot_mark] -> audit_board_dashboard]

% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: If the
% Audit Board cannot find a ballot, the tool should have a “ballot not
% found” box that the Audit Board will select. This will be marked as
% an error and the county may have to audit additional ballots.
  report_ballot_not_found:
    [audit_board_dashboard, phantom_ballot -> audit_board_dashboard]  

%%% If a ballot does not have a voter-verifiable paper ballot associated
%%% with it then we report such and recompute.
  report_ballot_has_no_voter_verifiable_paper_record:
    [audit_board_dashboard, non_voter_verifiable_ballot ->
     audit_board_dashboard]  

%%% If supported by the county’s voting system, the audit board may
%%% refer to the digital image of the audited ballot captured by the
%%% voting system in order to confirm it has retrieved the correct
%%% ballot randomly selected for audit. If the scanned ballot was
%%% duplicated prior to tabulation, the audit board must also retrieve
%%% and compare the markings on the original ballot. The audit board
%%% must complete its reports of all ballots randomly selected for
%%% audit no later than 5:00 PM MT one business day before the
%%% canvass deadline.
%%%
%%% The audit board must interpret voter markings on ballots selected
%%% for audit in accordance with the secretary of state’s voter intent
%%% guide.
%%% 
%%% To the extent applicable, the Secretary of State will compare the
%%% audit board’s reports of the audited ballots to the corresponding
%%% CVRs and post the results of the comparison and any margin
%%% overstatements or understatements on the audit center.
  compare_reported_markings_to_cvr:
    [ballot, cvr, list[ballot_mark] ->
     [margin_overstatement, margin_understatement]]

%%% The RLA will continue until the risk limit for the audited
%%% contests is met or until a full hand count results. If the county
%%% audit reports reflect that the risk limit has not been satisfied
%%% in an audited contest, the Secretary of State will randomly select
%%% additional ballots for audit.

% @review CDOS The details of this last fragment of the process are
% very underspecified.  We need clarity on what they exactly want.

%%% We presume at the moment that if errors are made during the
%%% auditing process, we should capture information in the RLA
%%% Tool about those errors and their mitigation and resolution.

% @review CDOS We need input on how much, and what kind, of logging
% they want to see of this nature.
  submit_audit_mistake_report:
    [audit_board_dashboard, audit_mistake_report ->
     audit_board_dashboard]

% @review CDOS We also do not have requirements from CDOS as to how to
% complete the audit process and have the audit board members "sign"
% the audit.
  submit_audit_report:
    [audit_board_dashboard, audit_report -> audit_board_dashboard]

% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: The
% Audit Board and county admin will sign off on each round until the
% audit completed.
  signoff_intermediate_audit_report:
    [audit_board_dashboard, audit_report -> audit_board_dashboard]

END audit_board_dashboard

%%% \subsection{Public Dashboard}

public_dashboard: THEORY
BEGIN
  IMPORTING dashboard

% @review CDOS The public dashboard is very underspecified at the
% moment. The only thing that the contract mandates is that the public
% must be able to "download data and reports".

% @trace CORLA System Spec v1.0

%%% We are currently proposing that the following set of data and reports
%%% be included on the public dashboard:

%%% \begin{enumerate}

%%% \item Target and Current Risk Limits, by Contest

%%% \item Audit Board names by County

%%% \item County Ballot Manifests, CVRs and Hashes (status \& download
%%% links)

%%% \item Seed for randomization

%%% \item Ballot Order

%%% \item List of Audit Rounds (number of ballots, status by County,
%%% download links)

%%% \item Link to Final Audit Report

%%% \end{enumerate}

END public_dashboard

%+END dashboards

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN authentication

%%% \section{Authentication}

%%% Authentication is currently underspecified in our system design as
%%% we do not yet have information from CDOS on the nature and kind of
%%% their mandated two-factor authentication system. Consequently, we
%%% have only modeled the necessary concepts and features of any
%%% two-factor authentication system. Included in this model are the
%%% ideas of usernames, passwords, other authentication factors
%%% mentioned in CDOS documents (such as biometrics and physical
%%% tokens like smartcards and one-time authentication code books),
%%% etc.
%%%
%%% Given that CDOS is handling two-factor authentication, it is
%%% unclear if they want any additional features such as a password
%%% reset.

% @review kiniry Once we better understand CDOS's authentication
% system, we will better know what authentication features we can
% support.

authentication: THEORY
BEGIN
  IMPORTING roles, dashboard, election, dashboard,
            information_systems, upload_system_message, ballots,
            cryptography, cast_vote_records
  
% @description A credential is the general idea of having some
% knowledge or thing to permit one to authenticate to a system. Many
% authentication systems mandate the use of multiple credentials.
  credential: TYPE 
  username: TYPE FROM credential
  password: TYPE FROM credential
% @trace Task order 1, page 4, "Uptime/Security"
  complex_enough?: [password -> bool]
% complex_check_update: [complex_enough? -> ?]
  biometric: TYPE FROM credential
  physical_token: TYPE FROM credential

% @description One has authentication if a person has the appropriate
% combination of identity and set of credentials.
  authentication: TYPE FROM [person, set[credential]]
% @description Two-factor authentication is a currently-popular form
% of authentication that requires more than just knowledge (say, of a
% username and password), and at least one physical mechanism, such as
% a biometric or a physical token.
  two_factor_authentication: TYPE =
    [[username, password], [physical_token + biometric]]

%%% In order to obtain a new, valid credential, some authority must
%%% issue credentials to a specific person.
  issue_credential: TYPE =
    [cdos, state_election, person -> [person, two_factor_authentication]]

%%% What are the credentials that have been issued to this person?
  credential?: [person -> two_factor_authentication]

%%% Is this person authenticated?
  authenticated: [person, two_factor_authentication -> bool]

%%% What follows are several features used to authenticate various
%%% roles to their respective dashboards.
%%%
%%% Each dashboard has an abstract state machine that captures the
%%% dashboard's workflow and consequntly identifies which features are
%%% visible to its users at various stages. Those abstract state
%%% machines and features are modeled in the dashboard modules
%%% below. We focus only on authentication here.

% @todo kiniry Introduce an authentication monad and a state monad for
% our ASMs.

% @description Authenticate this county administrator to that county dashboard.
  authenticate_county_administrator:
    [county_dashboard, county_administrator, two_factor_authentication -> bool]
% @description Authenticate this state administrator to that state-wide dashboard.
  authenticate_state_administrator:
    [state_wide_dashboard, state_administrator, two_factor_authentication -> bool]
END authentication

%+END authentication

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN architecture

%%% \section{System Architecture}

%%% As mentioned early in this chapter, the RLA Tool is a
%%% client-server system. As usual for these kinds of systems, the
%%% server part of this architectural style is known as the back-end
%%% and the client part as the front-end.

% @relation back_end inherit system_architecture_component
% @relation front_end inherit system_architecture_component
system_architecture_component: DATATYPE WITH SUBTYPES back_end, front_end
BEGIN
  IMPORTING information_systems, database, server

  back_end?(servers: set[server],
            networks: set[network],
            databases: set[database]): make_back_end: back_end
  front_end?(web_browser: web_browser,
             code: javascript_code): make_front_end: front_end
END system_architecture_component

%%% The RLA system focuses on a single election and has a back-end and
%%% a front-end.

% @review kiniry Should we design the system so that we can facilitate
% mutiple concurrent elections?

rla_tool: DATATYPE
BEGIN
  IMPORTING election, system_architecture_component

% @trace RDPR-6-Jul-2017 Section 25.1.8
% @description The software and user interface provided by the
% Secretary of State in order for counties to conduct RLAs.
  rla_tool?(election: state_election,
            front_end: front_end,
            back_end: back_end): make_rla_tool
END rla_tool

%%% The system architecture consists of:

%%% \begin{enumerate}

%%% \item several servers of different kinds deployed and configured
%%% in a redundant fashion as described elsewhere;

%%% \item several databases whose tables and data are transactionally
%%% identical (this means that after each transaction completes, all
%%% databases are guaranteed to never witness to a client an
%%% inconsistent state relative to that transaction);

%%% \item a JavaScript-based front-end whose code comes only from the
%%% system's web servers; and

%%% \item HTTPS-based connections between the front-end and the
%%% back-end over which the web application transmits data, including
%%% new HTML pages, style sheets, data input by the web browser user,
%%% etc.

%%% \end{enumerate}

system_architecture: THEORY
BEGIN
  IMPORTING system_architecture_component, server, rla_tool

  rla: VAR rla_tool
  be: VAR back_end
  fe: VAR front_end
  db1, db2: VAR database_server

  make_rla_tool: [back_end, front_end -> rla_tool]

  javascript_code?: [front_end -> javascript_code]
  code_origins?: [javascript_code -> web_server]
  
%%% The front-end, which is written in TypeScript and JavaScript, is
%%% provided to a web browser client directly from the web server.
  browser_code_origins: AXIOM
    (FORALL (rla):
      member(code_origins?(code(fe)), servers(be))
      WHERE fe = front_end(rla), be = back_end(rla))

% @description Are these databases transactionally synchronized?
  transactionally_synchronized?: [set[database] -> bool]

%%% The back-end consists of two or more servers, two or more
%%% networks, and two or more databases. The minimum cardinality of
%%% these three sets is two because the system must have redundancy to
%%% be fault tolerant and not have a single point of failure.
  redundancy: AXIOM
    (FORALL (be): 2 <= card(servers(be))
              AND 2 <= card(networks(be))
              AND 2 <= card(databases(be)))
%%% Multiple databases entails having multiple synchronized database
%%% servers amongst the back-end's servers. Note that our model is
%%% simplified here insofar as we are presuming that all databases
%%% across synchronized database servers are synchronized. It is
%%% certianly possible to deploy synchronized databases in a fashion
%%% that does not fulfill this requirement, but for all databases
%%% relevant to this system, this requirement does hold.
  database_redundancy: AXIOM
    (FORALL (be): EXISTS (db1, db2):
      member(db1, servers(be)) AND member(db2, servers(be))
  AND db1 /= db2
  AND transactionally_synchronized?(union(databases(db1),databases(db2))))
END system_architecture

%+END architecture

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN system_assumptions

%%% \section{System Assumptions}
%%% \label{sec:System_Assumptions}

%%% This system architecture includes a number of explicit assumptions
%%% derived from C.R.S.

system_assumptions: THEORY
BEGIN
  IMPORTING election, fafessl
  
  e: VAR state_election
% @trace RDPR-6-Jul-2017 Section 25.2.2(E)

%%% According to the section entitled "CVR Export Verification",
%%% counties conducting a comparison audit must verify that:

%%% \begin{enumerate}

%%% \item The number of individual CVRs in its CVR export equals the
%%% aggregate number of ballots reflected in the county’s ballot
%%% manifest as of the ninth day after election day;
  CVR_count_equals_ballot_manifest_count: AXIOM TBD

%%% \item The number of individual CVRs in its CVR export equals the
%%% number of ballots tabulated as reflected in the summary results
%%% report for the RLA tabulation;
  CVR_count_equals_summary_results_report_count: AXIOM TBD

%%% \item The number of individual CVRs in its CVR export equals the
%%% number of in-person ballots issued plus the number of mail ballots
%%% in verified-accepted stage in score, plus the number of
%%% provisional ballots and property owner ballots included in the RLA
%%% tabulation, if any; and
  CVR_count_equals_aggregate_count_over_ballot_kinds: AXIOM TBD

%%% \item The vote totals for all choices in all ballot contests in
%%% the CVR export equals the vote totals in the summary results
%%% report for the RLA tabulation.
  CVR_vote_totals_equals_summary_results_vote_totals: AXIOM TBD

%%% \end{enumerate}

END system_assumptions

%+END system_assumptions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% \section{System Logging}

%%% The system must log a variety of events. One reason to log
%%% information is to help understand how the system is operating, fix
%%% bugs post-facto, understand how users are using the system,
%%% etc. Another, more important reason to log in this context of this
%%% system is to provide an indeliable record of administrator and
%%% auditor actions so that any audit can be "replayed" by any third
%%% party.

logging: THEORY
BEGIN
  log: TYPE = sequence[string]
  chain_of_custody_log: TYPE FROM log
% @trace Per email from Jerome Lovato at CDOS on 19 July 2017: Logging
% of Audit Board and SOS user errors during use of the system [...is
% the only logging we care about].
  rla_tool_log: TYPE FROM log
END logging

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% \section{Data Model}

%%% A single, mirrored relational database is used to store all
%%% persistent information for the RLA Tool.  In order to define the
%%% data model of the system, we need to:
%%% \begin{enumerate}
%%% \item identify the \emph{core concepts} that must be persistent in
%%% the system
%%% \item identify the \emph{relationships} that must be persistent in the
%%% system
%%% \item derive from these pieces of information:
%%%   \begin{enumerate}
%%%   \item the necessary \emph{tables} that \emph{collect concepts},
%%%   \item identify the \emph{indexing concept} of each table, and
%%%   \item define the appropriate \emph{joins} that realize
%%%         relationships
%%%   \end{enumerate}
%%% \end{enumerate}

data_model: THEORY
BEGIN
  IMPORTING fafessl, database, information_systems, roles, rla_tool,
            authentication

  be: VAR back_end
  db: VAR database

%%% The first set of data persistently stored relates to
%%% authentication. Some of this data will be stored in the two-factor
%%% authentication system provided by CDOS. All other data must be
%%% stored in the RLA Tool database. In general, each entry in the
%%% authentication table is simply an administrator and two-factor
%%% authentication credential pair.
  authentication_table: TYPE =
    [administrator, two_factor_authentication]

%%% From the State's point of view 

END data_model

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% \section{Domain Model}

%%% Thus, the overall domain model of this system is the sum total of
%%% all concepts introduced in this chapter.

terminology: THEORY
BEGIN
  IMPORTING
% @description "TBD"
    ballots,
% @description "TBD"
    elections,
% @description "TBD"
    audits,
% @description "TBD"
    instructions_forms_reports,
% @description "TBD"
    roles,
% @description "TBD"
    randomness,
% @description "TBD"
    cryptography,
% @description "TBD"
    rlas,
% @description "TBD"
    elections_equipment,
% @description "TBD"
    authentication,
% @description "TBD"
    cast_vote_records,
% @description "TBD"
% @review CDOS what is the source of info
% presented to audit board to tell them which paper ballot
% they should examine next? Is it the CVR alone that is 
% the source? And what information must the audit board 
% enter into the system to ascertain that the paper
% ballot they are holding does in fact match the CVR
% that will be compared to their interpretation? Will 
% the audit board simply click "Yes, this is the right 
% paper ballot"? Or will they have to enter some confirming 
% piece of information (e.g., ballot style, a ballot ID number?).
% @review CDOS if the audit has several "rounds",
% does the Audit Board need to "sign" after each
% round?
    user_interface,
% @description "TBD"
    dashboard,
% @description "TBD"
    database,
% @description "TBD"
    information_systems,
% @description "TBD"
    system_architecture
END terminology

% @system CORLA_SYSTEM
% @indexing-author Joseph Kiniry <kiniry@freeandfair.us>
% @indexing-organization Free & Fair
% @indexing-keywords Free & Fair
% @indexing-created Free & Fair
% @indexing-github Free & Fair
% @explanation "TBD"
corla: THEORY
BEGIN
  IMPORTING
% @description "TBD"
    terminology
END corla
